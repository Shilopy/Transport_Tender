# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import win32com.client as win32
import pythoncom
from datetime import datetime
import json
import os
import re
import requests
from functools import lru_cache
from io import BytesIO
import tempfile
import shutil
from docxtpl import DocxTemplate
import time
import sys
import io
# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CONFIG_FILE = "requirements.txt"
BIDS_FILE = "bids.json"
CARRIERS_FILE = "carriers.json"
OFFERS_FILE = "offers.json"
CONTRACTS_FILE = "contracts.json"
CARRIERS_INFO_FILE = "carriers_info.xlsx"
# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ---
def init_files():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    for file in [BIDS_FILE, CARRIERS_FILE, OFFERS_FILE, CONTRACTS_FILE]:
        try:
            if not os.path.exists(file):
                with open(file, 'w', encoding='utf-8') as f:
                    json.dump([], f, ensure_ascii=False)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file}: {str(e)}")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞—Ö
    if not os.path.exists(CARRIERS_INFO_FILE):
        try:
            df_example = pd.DataFrame(columns=[
                'name', 'email', 'legal_name', 'inn', 'kpp', 'ogrn', 'address',
                'bank_name', 'bik', 'rs', 'ks', 'contract_number', 'contract_date'
            ])
            df_example.to_excel(CARRIERS_INFO_FILE, index=False)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {CARRIERS_INFO_FILE}: {str(e)}")
init_files()
# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_json_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {str(e)}")
        return []
def save_json_file(filename, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {str(e)}")
# --- –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Outlook ---
def init_outlook():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Outlook"""
    pythoncom.CoInitialize()
    return win32.Dispatch("Outlook.Application")
# --- –†–∞–±–æ—Ç–∞ —Å Outlook ---
def send_email(to, subject, body_text, attachments=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ Outlook —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–ª–æ–∂–µ–Ω–∏–π"""
    try:
        outlook = init_outlook()
        mail = outlook.CreateItem(0)
        mail.To = to
        mail.Subject = subject
        mail.Body = body_text
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
        if attachments:
            for file in attachments:
                if os.path.exists(file):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                    mail.Attachments.Add(file)
                else:
                    st.warning(f"–§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω")
        mail.Send()
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False
    finally:
        pythoncom.CoUninitialize()
# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç ---
@lru_cache(maxsize=1)
def get_currency_rates():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        data = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=5).json()
        return {
            "USD": data["Valute"]["USD"]["Value"],
            "EUR": data["Valute"]["EUR"]["Value"],
            "date": data["Date"][:10]
        }
    except Exception:
        return {"USD": 90.0, "EUR": 100.0, "date": "N/A"}
# --- –í–∏–¥–∂–µ—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç ---
def currency_rates_widget():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤ —Å–∞–π–¥–±–∞—Ä–µ —Å –¥–µ–ª—å—Ç–æ–π –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    st.sidebar.title("üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    rates_today = get_currency_rates()
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    try:
        # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—á–µ—Ä–∞—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        # –¶–ë –†–§ API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        from datetime import datetime, timedelta
        yesterday = datetime.now() - timedelta(days=1)
        yesterday_str = yesterday.strftime("%Y/%m/%d") # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è API –¶–ë –†–§
        url_yesterday = f"https://www.cbr-xml-daily.ru/archive/{yesterday_str}/daily_json.js"
        data_yesterday = requests.get(url_yesterday, timeout=5).json()
        rates_yesterday = {
            "USD": data_yesterday["Valute"]["USD"]["Value"],
            "EUR": data_yesterday["Valute"]["EUR"]["Value"],
        }
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–≤—á–µ—Ä–∞—à–Ω–∏–µ" –∏–∑ –∫—ç—à–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
        # –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–ª—å—Ç—ã
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é –±–æ–ª–µ–µ –∏–∑—è—â–Ω–æ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –∏–ª–∏ —Å–µ—Å—Å–∏–∏
        rates_yesterday = {"USD": rates_today["USD"] / 1.005, "EUR": rates_today["EUR"] / 0.997}
        # st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å, –¥–µ–ª—å—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π.")
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—ã
    try:
        usd_delta_value = rates_today["USD"] - rates_yesterday["USD"]
        usd_delta_percent = (usd_delta_value / rates_yesterday["USD"]) * 100
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–ª—å—Ç—É: –∑–Ω–∞–∫ + –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        usd_delta = f"{'+' if usd_delta_value >= 0 else ''}{usd_delta_value:.2f} ({'+' if usd_delta_percent >= 0 else ''}{usd_delta_percent:.2f}%)"
    except:
        usd_delta = "N/A"
    try:
        eur_delta_value = rates_today["EUR"] - rates_yesterday["EUR"]
        eur_delta_percent = (eur_delta_value / rates_yesterday["EUR"]) * 100
        eur_delta = f"{'+' if eur_delta_value >= 0 else ''}{eur_delta_value:.2f} ({'+' if eur_delta_percent >= 0 else ''}{eur_delta_percent:.2f}%)"
    except:
        eur_delta = "N/A"
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã —Å –¥–µ–ª—å—Ç–∞–º–∏
    col1, col2 = st.sidebar.columns(2)
    with col1:
        st.metric("USD/RUB", f"{rates_today['USD']:.2f} ‚ÇΩ", delta=usd_delta)
    with col2:
        st.metric("EUR/RUB", f"{rates_today['EUR']:.2f} ‚ÇΩ", delta=eur_delta)
    # –ë–ª–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar.expander("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"):
        st.write(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {rates_today['date']}")
        st.write(f"–ö—É—Ä—Å USD –≤—á–µ—Ä–∞: {rates_yesterday['USD']:.2f}")
        st.write(f"–ö—É—Ä—Å EUR –≤—á–µ—Ä–∞: {rates_yesterday['EUR']:.2f}")
        st.write("""
        **–ò—Å—Ç–æ—á–Ω–∏–∫:** [–¶–ë –†–§ API](https://www.cbr-xml-daily.ru )  
        **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:** 1 —á–∞—Å  
        **–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:** USD=90.0, EUR=100.0
        """)
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="secondary"):
        get_currency_rates.cache_clear()
        st.rerun()
# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ –∏–∑ Excel ---
def get_carrier_info(carrier_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(CARRIERS_INFO_FILE):
            df = pd.read_excel(CARRIERS_INFO_FILE)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
            carrier_info = df[df['name'] == carrier_name]
            if not carrier_info.empty:
                return carrier_info.iloc[0].to_dict()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ: {str(e)}")
    return {}
# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ ---
def generate_contract(bid_data, offer_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É templates –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        os.makedirs("templates", exist_ok=True)
        template_path = os.path.join("templates", "template.docx")
        if not os.path.exists(template_path):
            raise FileNotFoundError("–®–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        doc = DocxTemplate(template_path)
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ
        carrier_info = get_carrier_info(offer_data['sender'])
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∏–∑ carriers_info, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å, –∏–Ω–∞—á–µ - –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        carrier_email_for_template = carrier_info.get('email', offer_data.get('sender_email', ''))
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        context = {
            'id': bid_data['id'],
            'date_created': datetime.now().strftime('%d.%m.%Y'),
            'carrier_name': offer_data['sender'],
            'carrier_email': carrier_email_for_template, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π email
            'country_from': bid_data['details']['country_from'],
            'loading_address': bid_data['details']['loading_address'],
            'cargo_type': bid_data['details']['cargo_type'],
            'cargo_description': bid_data['details'].get('cargo_description', ''), # –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞
            'container_type': bid_data['details']['container_type'],
            'hs_code': bid_data['details']['hs_code'],
            'incoterm': bid_data['details']['incoterm'],
            'ready_date': bid_data['details']['ready_date'],
            'payment_terms': bid_data['details']['payment_terms'],
            'notes': bid_data['details']['notes'],
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            'pre_carriage_cost': 0,
            'pre_carriage_currency': '',
            'othc_cost': 0,
            'othc_currency': '',
            'sea_freight_cost': 0,
            'sea_freight_currency': '',
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ
            'name': carrier_info.get('name', ''), # –î–æ–±–∞–≤–ª–µ–Ω–æ
            'email': carrier_info.get('email', ''), # –î–æ–±–∞–≤–ª–µ–Ω–æ
            'legal_name': carrier_info.get('legal_name', ''),
            'inn': carrier_info.get('inn', ''),
            'kpp': carrier_info.get('kpp', ''),
            'ogrn': carrier_info.get('ogrn', ''),
            'address': carrier_info.get('address', ''),
            'bank_name': carrier_info.get('bank_name', ''),
            'bik': carrier_info.get('bik', ''),
            'rs': carrier_info.get('rs', ''),
            'ks': carrier_info.get('ks', ''),
            'contract_number': carrier_info.get('contract_number', ''),
            'contract_date': carrier_info.get('contract_date', ''),
        }
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for cost in offer_data.get('costs', []):
            item_name = cost.get('ITEM', '')
            if 'Pre-carriage' in item_name:
                context['pre_carriage_cost'] = cost.get('COST', 0)
                context['pre_carriage_currency'] = cost.get('CURRENCY', 'USD')
            elif 'OTHC' in item_name:
                context['othc_cost'] = cost.get('COST', 0)
                context['othc_currency'] = cost.get('CURRENCY', 'USD')
            elif 'Sea freight' in item_name:
                context['sea_freight_cost'] = cost.get('COST', 0)
                context['sea_freight_currency'] = cost.get('CURRENCY', 'USD')
        doc.render(context)
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = tempfile.gettempdir()
        contract_path = os.path.join(temp_dir, f"contract_{bid_data['id']}_{offer_data['sender']}.docx")
        doc.save(contract_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –≤ –ø–∞–ø–∫—É contracts
        os.makedirs("contracts", exist_ok=True)
        shutil.copy(contract_path, os.path.join("contracts", os.path.basename(contract_path)))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–≥–æ–≤–æ—Ä–µ
        contracts = load_json_file(CONTRACTS_FILE)
        contracts.append({
            "bid_id": bid_data['id'],
            "offer_id": offer_data.get('bid_id', ''),
            "carrier": offer_data['sender'],
            "date": datetime.now().isoformat(),
            "file_path": os.path.join("contracts", os.path.basename(contract_path)),
            "status": "generated"
        })
        save_json_file(CONTRACTS_FILE, contracts)
        return contract_path
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞: {str(e)}")
        return None
# --- –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ Outlook ---
def parse_offers_from_outlook(folder_name="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"):
    """–ü–∞—Ä—Å–∏—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–∑ Outlook"""
    try:
        outlook = init_outlook()
        namespace = outlook.GetNamespace("MAPI")
        inbox = namespace.GetDefaultFolder(6)  # Inbox
        folder = inbox
        if folder_name != "–í—Ö–æ–¥—è—â–∏–µ":
            for i in range(1, inbox.Folders.Count + 1):
                if inbox.Folders.Item(i).Name == folder_name:
                    folder = inbox.Folders.Item(i)
                    break
        messages = folder.Items
        new_offers = []
        for msg in messages:
            if msg.UnRead:
                body = msg.Body
                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞
                sender_email = msg.SenderEmailAddress
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å SMTP –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ SenderEmailAddress –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º email
                if not (sender_email and "@" in sender_email and "." in sender_email.split("@")[-1]):
                    try:
                        sender_obj = msg.Sender
                        if sender_obj:
                            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å SMTP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ PropertyAccessor
                            # –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                            smtp_address = sender_obj.PropertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x39FE001E")
                            if smtp_address and "@" in smtp_address:
                                sender_email = smtp_address
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SMTP –∞–¥—Ä–µ—Å, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π SenderEmailAddress
                        pass
                offer_data = {
                    "sender": msg.SenderName,
                    "sender_email": sender_email,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π email
                    "email_date": msg.ReceivedTime.strftime("%Y-%m-%d %H:%M:%S"),
                    "subject": msg.Subject,
                    "bid_id": "",
                    "order_number": "‚Äî",
                    "rate": "",
                    "currency": "",
                    "conditions": "",
                    "status": "–ù–æ–≤–æ–µ",
                    "costs": []
                }
                # –ü–∞—Ä—Å–∏–Ω–≥ ID –∑–∞—è–≤–∫–∏
                # –ò—â–µ–º ID –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
                id_patterns = [
                    r"ID\s*–∑–∞—è–≤–∫–∏[^\w]*([A-Za-z0-9\-_]+)",
                    r"–ó–∞—è–≤–∫–∞\s*‚Ññ?[^\w]*([A-Za-z0-9\-_]+)",
                    r"(SHIP-\d{8}-\d{4})"  # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                ]
                for pattern in id_patterns:
                    id_match = re.search(pattern, body, re.IGNORECASE)
                    if id_match:
                        offer_data["bid_id"] = id_match.group(1)
                        break
                # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
                # –ò—â–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–±–µ–ª—ã
                order_patterns = [
                    r"–ù–æ–º–µ—Ä\s*–∑–∞–∫–∞–∑–∞[^\w]*([A-Z0-9]{2}\d{2}[-_]\d{3,})",
                    r"–ù–æ–º–µ—Ä\s*–∑–∞–∫–∞–∑–∞[^\w]*([A-Za-z0-9\-_\s/]+?)(?:\r?|$)",
                    r"Order\s*Number[^\w]*([A-Za-z0-9\-_\s/]+?)(?:\r?|$)"
                ]
                for pattern in order_patterns:
                    order_number_match = re.search(pattern, body, re.IGNORECASE)
                    if order_number_match:
                        offer_data["order_number"] = order_number_match.group(1).strip()
                        #print(f"DEBUG: Extracted order_number: '{offer_data['order_number']}' for email from {sender_email}") –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–ø–∞—Ä—Å–∏–ª!!!!!!    
                        break
                if offer_data["order_number"] == "‚Äî":  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                    # –ë–æ–ª–µ–µ –æ–±—â–∏–π –ø–æ–∏—Å–∫
                    #order_number_match = re.search(r"([A-Z0-9]+[-_]?[A-Z0-9]+)", body, re.IGNORECASE) -—Å—Ç–∞—Ä—ã–π!!!!!!!!!!!!!
                    order_number_match = re.search(r"([A-Z]{2,}\d+[-_]\d{2,})", body, re.IGNORECASE)
                    if order_number_match:
                        offer_data["order_number"] = order_number_match.group(1)
                # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–≤–∫–∏
                rate_match = re.search(r"–°—Ç–∞–≤–∫–∞:\s*([\d,.]+)\s*([A-Z]{3})", body, re.IGNORECASE)
                if rate_match:
                    offer_data["rate"] = rate_match.group(1).replace(',', '.').strip()
                    offer_data["currency"] = rate_match.group(2).strip()
                # –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ª–æ–≤–∏–π
                cond_match = re.search(r"–£—Å–ª–æ–≤–∏—è:\s*(.*?)(?:\r?\r?|\r??$)", body, re.DOTALL | re.IGNORECASE)
                if cond_match:
                    offer_data["conditions"] = cond_match.group(1).strip()
                # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                cost_start = body.find("–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
                if cost_start > -1:
                    cost_end = body.find("–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã", cost_start) or \
                               body.find("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", cost_start) or \
                               len(body)
                    cost_section = body[cost_start:cost_end]
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                    lines = [line.strip() for line in cost_section.split('\n') if line.strip()]
                    cost_items = [
                        "Pre-carriage",
                        "OTHC (Origin Terminal Handling Charges)",
                        "Sea freight",
                        "–ñ–î –ø–µ—Ä–µ–≤–æ–∑–∫–∞",
                        "–ü—Ä—è–º–æ–µ –ñ–î",
                        "–°—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã",
                        "–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏"
                    ]
                    for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                      for item in cost_items:
                        if line.startswith(item):
                            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ß–ê–õ–û ---
                            # –ò—â–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤–∞–ª—é—Ç—É –≤ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞
                            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: "–ñ–î –ø–µ—Ä–µ–≤–æ–∑–∫–∞            213 300     RUB"
                            # –∏–ª–∏ "Sea freight            1 470,50     USD"
                            # –∏–ª–∏ "Pre-carriage            0.0     USD"
                            rest_of_line = line[len(item):].strip()
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏/–∑–∞–ø—è—Ç—ã–º–∏/—Ç–æ—á–∫–∞–º–∏) –∏ –≤–∞–ª—é—Ç—ã
                            # ([\d\s.,]+) - –≥—Ä—É–ø–ø–∞ 1: —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ
                            # \s+ - –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤
                            # ([A-Z]{3}) - –≥—Ä—É–ø–ø–∞ 2: —Ä–æ–≤–Ω–æ 3 –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (–≤–∞–ª—é—Ç–∞)
                            cost_currency_match = re.search(r'([\d\s.,]+)\s+([A-Z]{3})', rest_of_line)
                            if cost_currency_match:
                                cost_str = cost_currency_match.group(1) # –ù–∞–ø—Ä–∏–º–µ—Ä, "213 300" –∏–ª–∏ "1 470,50" –∏–ª–∏ "0.0"
                                currency = cost_currency_match.group(2) # –ù–∞–ø—Ä–∏–º–µ—Ä, "RUB" –∏–ª–∏ "USD"
                                try:
                                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ float
                                    cost_str_cleaned = cost_str.replace(' ', '').replace(',', '.')
                                    cost = float(cost_str_cleaned)
                                    offer_data["costs"].append({
                                        "ITEM": item,
                                        "COST": cost,
                                        "CURRENCY": currency
                                    })
                                except ValueError:
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                                    # st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å '{cost_str}' –≤ —Å—Ç—Ä–æ–∫–µ: {line}")
                                    continue
                                break # –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
                            else:
                                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                                # (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
                                # st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤–∞–ª—é—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏: {line}")
                                continue
                            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–ï–¶ ---                if offer_data["bid_id"]:
                    new_offers.append(offer_data)
                    msg.UnRead = False
        if new_offers:
            try:
                existing_offers = load_json_file(OFFERS_FILE)
                save_json_file(OFFERS_FILE, existing_offers + new_offers)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {str(e)}")
            return new_offers
        else:
            st.info("–ù–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–∏—Å–µ–º: {str(e)}")
        return []
    finally:
        pythoncom.CoUninitialize()

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ ---
def format_bid_email(bid):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫—É"""
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    email_lines = [
        "–£–≤–∞–∂–∞–µ–º—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä,",
        "—Å—Ä–æ–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–æ 15:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è, –∑–∞—è–≤–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∂–µ –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏, –Ω–µ –º–µ–Ω—è—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è,",
        "—É–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, –≤–∞–ª—é—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"RUB\" –∏–ª–∏ \"USD\", –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π –Ω–µ –º–µ–Ω—è—Ç—å, –Ω–µ —É–¥–∞–ª—è—Ç—å –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å.",
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–æ–ª–µ \"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è\"",
        "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        f"ID –∑–∞—è–≤–∫–∏: {bid['id']}",
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {bid.get('order_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
        f"–°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {bid['details']['country_from']}",
        f"–£—Å–ª–æ–≤–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏: {bid['details']['incoterm']}",
        f"–ü–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {bid['details']['port_from']}",
        f"–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞: {bid['details']['ready_date']}",
        f"–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {bid['details']['container_type']}",
        f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {bid['details']['delivery_method']}",
        f"–ì—Ä—É–∑: {bid['details']['cargo_type']}",
        f"–ö–æ–¥ –¢–ù–í–≠–î: {bid['details']['hs_code']}",
        "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞:",
        f"–ê–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏: {bid['details']['loading_address']}",
        "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:"
    ]
    
    cost_items = [
        "Pre-carriage",
        "OTHC (Origin Terminal Handling Charges)",
        "Sea freight",
        "–ñ–î –ø–µ—Ä–µ–≤–æ–∑–∫–∞",
        "–ü—Ä—è–º–æ–µ –ñ–î",
        "–°—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã",
        "–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏"
    ]
    
    for item in cost_items:
        matching_cost = next((c for c in bid['costs'] if c["ITEM"] == item), 
                           {"COST": 0.0, "CURRENCY": "USD"})
        email_lines.append(f"{item}: {matching_cost['COST']} {matching_cost['CURRENCY']}")
    
    email_lines.extend([
        "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        f"–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {bid['details']['payment_terms']}",
        "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:"
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    if bid['details'].get('cargo_description'):
        cargo_desc_lines = bid['details']['cargo_description'].split('\n')
        for line in cargo_desc_lines:
            if line.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                email_lines.append(f"  {line}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    if bid['details'].get('notes'):
        notes_lines = bid['details']['notes'].split('\n')
        for line in notes_lines:
            if line.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                email_lines.append(f"  {line}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    return '\n'.join(email_lines)

# --- –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ ---
def create_bid_form():
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É"""
    with st.form("new_bid", clear_on_submit=True):
        st.subheader("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É")
        col1, col2 = st.columns(2)
        with col1:
            bid_id = st.text_input("ID –∑–∞—è–≤–∫–∏*", value=f"SHIP-{datetime.now().strftime('%Y%m%d-%H%M')}")
            order_number = st.text_input("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞*", "IN00-000")
            country_from = st.text_input("–°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏*", "–ö–∏—Ç–∞–π")
            incoterm = st.selectbox("–£—Å–ª–æ–≤–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏*", ["FOB", "CIF", "EXW", "DAP", "DDP", "CFR", "FCA", "CPT"])
        with col2:
            port_from = st.text_input("–ü–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏*", "Shanghai")
            ready_date = st.date_input("–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞*", datetime.now())
            container_type = st.selectbox("–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞*", ["20 —Ñ—É—Ç", "40 —Ñ—É—Ç", "40 —Ñ—É—Ç HQ", "–ê–≤—Ç–æ 20—Ç–Ω", "–°–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑"] )
            delivery_method = st.selectbox("–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏*", ["–ú–æ—Ä–µ+–ñ–î", "–ü—Ä—è–º–æ–µ –ñ–î", "–ê–≤—Ç–æ", "–ê–≤–∏–∞"], key="delivery_method")
        st.subheader("–î–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞")
        cargo_type = st.text_input("–¢–∏–ø –≥—Ä—É–∑–∞*", "–Ω–µ –æ–ø–∞—Å–Ω—ã–π")
        hs_code = st.text_input("–ö–æ–¥ –¢–ù–í–≠–î", "")
   #  ---–æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞
        cargo_description = st.text_area(
  	    "–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞*",
    	    '''- –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ :
        - –≤–µ—Å (–Ω–µ—Ç—Ç–æ/–±—Ä—É—Ç—Ç–æ):
        - –æ–±—ä—ë–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤—ã—Ö –º–µ—Å—Ç: 
        - –≤–∏–¥ —É–ø–∞–∫–æ–≤–∫–∏:
        - —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞:''',
        height=150,
        key="cargo_description"
)
        loading_address = st.text_area("–ê–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏*", 
                                     "16F, No.839, Sec.4, Taiwan Blvd., Xitun Dist., 407 Taichung, TAIWAN")
        st.subheader("–§–∞–π–ª—ã")
        uploaded_files = st.file_uploader(
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–∑–∞)", 
            type=["pdf", "docx", "xlsx", "jpg", "png"], 
            accept_multiple_files=True
        )
        valid_files = []
        total_size = 0
        if uploaded_files:
            for file in uploaded_files:
                if file.size > 15 * 1024 * 1024:
                    st.warning(f"–§–∞–π–ª {file.name} –±–æ–ª—å—à–µ 15 –ú–ë –∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
                else:
                    total_size += file.size
                    valid_files.append(file)
            if total_size > 15 * 1024 * 1024:
                st.error("–°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 15 –ú–ë. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        st.subheader("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è")
        payment_terms = st.text_area("–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã*", 
                                   "50% TT in advance / 50% 14 days after delivery")
        st.subheader("–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        costs = []
        cost_items = [
            "Pre-carriage",
            "OTHC (Origin Terminal Handling Charges)",
            "Sea freight",
            "–ñ–î –ø–µ—Ä–µ–≤–æ–∑–∫–∞",
            "–ü—Ä—è–º–æ–µ –ñ–î",
            "–°—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã",
            "–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏"
        ]
        for item in cost_items:
            col1, col2, col3 = st.columns([3, 1, 1])
            with col1:
                st.text(item)
            with col2:
                cost = st.number_input(f"–°—É–º–º–∞ {item}", 
                                     key=f"cost_{item}", 
                                     min_value=0.0,
                                     value=0.0)
            with col3:
                currency = st.selectbox("–í–∞–ª—é—Ç–∞", 
                                      ["USD", "RUB", "EUR"], 
                                      key=f"curr_{item}")
            costs.append({"ITEM": item, "COST": cost, "CURRENCY": currency})
        notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", '''–ü—Ä–æ—Å—Ç–æ–π –Ω–∞ –≤—ã–≥—Ä—É–∑–∫–µ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
–ø—Ä–æ—á–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–º–µ—Ç–∫–∞ –°–ö–ö''')
        if st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"):
            if not all([bid_id, country_from, port_from, cargo_type, loading_address, payment_terms]):
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ø–æ–º–µ—á–µ–Ω—ã *)")
            else:
                bid_data = {
                    "id": bid_id,
                    "order_number": order_number,
                    "date_created": datetime.now().isoformat(),
                    "status": "–ù–æ–≤–∞—è",
                    "details": {
                        "country_from": country_from,
                        "incoterm": incoterm,
                        "port_from": port_from,
                        "ready_date": str(ready_date),
                        "container_type": container_type,
                        "cargo_type": cargo_type,
			"cargo_description": cargo_description,
                        "delivery_method": delivery_method,
                        "hs_code": hs_code,
                        "loading_address": loading_address,
                        "payment_terms": payment_terms,
                        "notes": notes
                    },
                    "costs": costs
                }
                try:
                    bids = load_json_file(BIDS_FILE)
                    bids.append(bid_data)
                    save_json_file(BIDS_FILE, bids)
                    carriers = load_json_file(CARRIERS_FILE)
                    email_body = format_bid_email(bid_data)
                    success_count = 0
                    attachments = []
                    if valid_files:
                        for file in valid_files:
                            temp_file_path = os.path.join(tempfile.gettempdir(), file.name)
                            with open(temp_file_path, "wb") as f:
                                f.write(file.getbuffer())
                            attachments.append(temp_file_path)
                    for carrier in carriers:
                        # –†–∞–∑–¥–µ–ª—è–µ–º email –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º: –∑–∞–ø—è—Ç–∞—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π, –¥–≤–æ–µ—Ç–æ—á–∏–µ
                        email_list = []
                        if carrier['email']:
                            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ –∑–∞–ø—è—Ç—ã–µ, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
                            normalized_emails = carrier['email'].replace(';', ',').replace(':', ',')
                            email_list = [e.strip() for e in normalized_emails.split(',') if e.strip()]
                        for email in email_list:
                            if email and '@' in email:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email —Å–æ–¥–µ—Ä–∂–∏—Ç @
                                if send_email(email, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {bid_id}", email_body, attachments):
                                    success_count += 1
                                else:
                                    st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {carrier['name']} ({email})")
                            elif email:  # –ï—Å–ª–∏ email –µ—Å—Ç—å, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç @
                                st.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –¥–ª—è {carrier['name']}: {email}")
                    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if attachments:
                        for file in attachments:
                            try:
                                os.remove(file)
                            except Exception as e:
                                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file}: {e}")
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if success_count > 0:
                        st.success(f"–ó–∞—è–≤–∫–∞ {bid_id} —Å–æ–∑–¥–∞–Ω–∞! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º")
                        time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    else:
                        st.warning("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º")
                        time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}")
                    time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ---
def view_offers():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ—Ç –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤"""
    st.subheader("–ü–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    col1, col2 = st.columns([3, 1])
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"):
            new_offers = parse_offers_from_outlook()
            if new_offers:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(new_offers)} –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            else:
                st.info("–ù–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            st.rerun()
    offers = load_json_file(OFFERS_FILE)
    if offers:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        rates = get_currency_rates()
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_data = []
        for offer in offers:
            total_rub = 0.0
            costs_dict = {}
            for cost in offer.get('costs', []):
                if cost.get('ITEM'):
                    cost_value = cost.get('COST', 0)
                    currency = cost.get('CURRENCY', '')
                    if currency == "USD":
                        converted = cost_value * rates["USD"]
                    elif currency == "EUR":
                        converted = cost_value * rates["EUR"]
                    else:
                        converted = cost_value
                    total_rub += converted
                    costs_dict[cost['ITEM']] = {
                        'COST': cost_value,
                        'CURRENCY': currency,
                        'COST_RUB': converted
                    }
            comparison_data.append({
                "–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è": offer["email_date"],
                "–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫": offer["sender"],
                "ID –∑–∞—è–≤–∫–∏": offer["bid_id"],
                "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": offer.get("order_number", "‚Äî"),
                "Pre-carriage": f"{costs_dict.get('Pre-carriage', {}).get('COST', 0):.2f} {costs_dict.get('Pre-carriage', {}).get('CURRENCY', '')}",
                "OTHC": f"{costs_dict.get('OTHC (Origin Terminal Handling Charges)', {}).get('COST', 0):.2f} {costs_dict.get('OTHC (Origin Terminal Handling Charges)', {}).get('CURRENCY', '')}",
                "Sea freight": f"{costs_dict.get('Sea freight', {}).get('COST', 0):.2f} {costs_dict.get('Sea freight', {}).get('CURRENCY', '')}",
                "–ñ–î –ø–µ—Ä–µ–≤–æ–∑–∫–∞": f"{costs_dict.get('–ñ–î –ø–µ—Ä–µ–≤–æ–∑–∫–∞', {}).get('COST', 0):.2f} {costs_dict.get('–ñ–î –ø–µ—Ä–µ–≤–æ–∑–∫–∞', {}).get('CURRENCY', '')}",
                "–ü—Ä—è–º–æ–µ –ñ–î": f"{costs_dict.get('–ü—Ä—è–º–æ–µ –ñ–î', {}).get('COST', 0):.2f} {costs_dict.get('–ü—Ä—è–º–æ–µ –ñ–î', {}).get('CURRENCY', '')}",
                "–°—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã": f"{costs_dict.get('–°—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã', {}).get('COST', 0):.2f} {costs_dict.get('–°—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã', {}).get('CURRENCY', '')}",
                "–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏": f"{costs_dict.get('–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏', {}).get('COST', 0):.2f} {costs_dict.get('–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏', {}).get('CURRENCY', '')}",
                "–ò—Ç–æ–≥–æ (RUB)": f"{total_rub:.2f} ‚ÇΩ",
                "–°—Ç–∞—Ç—É—Å": offer.get("status", "–ù–æ–≤–æ–µ")
            })
        df_comparison = pd.DataFrame(comparison_data)
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ID –∑–∞—è–≤–∫–∏
        bid_id_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ ID –∑–∞—è–≤–∫–∏")
        if bid_id_filter:
            df_comparison = df_comparison[df_comparison['ID –∑–∞—è–≤–∫–∏'].str.contains(bid_id_filter, case=False)]
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã ID –∑–∞—è–≤–∫–∏
        df_comparison['min_total_rub'] = df_comparison.groupby('ID –∑–∞—è–≤–∫–∏')['–ò—Ç–æ–≥–æ (RUB)'].transform('min')
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
        df_display = df_comparison.copy()
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö "–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫" –∏ "–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º .apply() —Å –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–µ–∑–∫–∏
        df_display["–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫"] = df_display["–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫"].apply(
            lambda x: x[:20] if isinstance(x, str) else x
        )
        df_display["–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"] = df_display["–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"].apply(
            lambda x: x[:10] if isinstance(x, str) else x
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ –∫–æ–ª–æ–Ω–∫–µ "–ò—Ç–æ–≥–æ (RUB)"
        for bid_id in df_display['ID –∑–∞—è–≤–∫–∏'].unique():
            min_value = df_display[df_display['ID –∑–∞—è–≤–∫–∏'] == bid_id]['–ò—Ç–æ–≥–æ (RUB)'].min()
            df_display.loc[(df_display['ID –∑–∞—è–≤–∫–∏'] == bid_id) & (df_display['–ò—Ç–æ–≥–æ (RUB)'] == min_value), '–ò—Ç–æ–≥–æ (RUB)'] = \
                df_display.loc[(df_display['ID –∑–∞—è–≤–∫–∏'] == bid_id) & (df_display['–ò—Ç–æ–≥–æ (RUB)'] == min_value), '–ò—Ç–æ–≥–æ (RUB)'].apply(
                    lambda x: f"‚≠ê {x}"
                )
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫
        edited_df = st.data_editor(
            df_display,
            use_container_width=True,
            hide_index=True,
            disabled=["–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è", "–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫", "ID –∑–∞—è–≤–∫–∏", "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "Pre-carriage", "OTHC", 
                     "Sea freight", "–ñ–î –ø–µ—Ä–µ–≤–æ–∑–∫–∞", "–ü—Ä—è–º–æ–µ –ñ–î", "–°—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã", 
                     "–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏", "–ò—Ç–æ–≥–æ (RUB)"],
            column_config={
                "–°—Ç–∞—Ç—É—Å": st.column_config.SelectboxColumn(
                    "–°—Ç–∞—Ç—É—Å",
                    options=["–ù–æ–≤–æ–µ", "–í —Ä–∞–±–æ—Ç–µ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "–ü—Ä–∏–Ω—è—Ç–æ"],
                    required=True
                )
            }
        )
        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ ---
        st.markdown("### üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞")
        # –í—ã–±–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
        selected_offer_idx = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞",
            range(len(edited_df)),
            format_func=lambda x: f"{edited_df.iloc[x]['–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫']} - {edited_df.iloc[x]['ID –∑–∞—è–≤–∫–∏']}"
        )
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üñ®Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä"):
                selected_row = edited_df.iloc[selected_offer_idx]
                offers = load_json_file(OFFERS_FILE)
                selected_offer = next(
                    (o for o in offers 
                     if o["bid_id"] == selected_row["ID –∑–∞—è–≤–∫–∏"] 
                     and o["sender"] == selected_row["–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫"]),
                    None
                )
                if selected_offer:
                    bids = load_json_file(BIDS_FILE)
                    selected_bid = next((b for b in bids if b["id"] == selected_offer["bid_id"]), None)
                    if selected_bid:
                        contract_path = generate_contract(selected_bid, selected_offer)
                        if contract_path:
                            st.success("–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                            time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            with open(contract_path, "rb") as f:
                                st.download_button(
                                    label="üì• –°–∫–∞—á–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                                    data=f,
                                    file_name=f"–î–æ–≥–æ–≤–æ—Ä_{selected_bid['id']}_{selected_offer['sender']}.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞")
                            time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    else:
                        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∑–∞—è–≤–∫–∞")
                        time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                else:
                    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
                    time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        with col2:
            if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É"):
                selected_row = edited_df.iloc[selected_offer_idx]
                offers = load_json_file(OFFERS_FILE)
                selected_offer = next(
                    (o for o in offers 
                     if o["bid_id"] == selected_row["ID –∑–∞—è–≤–∫–∏"] 
                     and o["sender"] == selected_row["–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫"]),
                    None
                )
                if selected_offer:
                    bids = load_json_file(BIDS_FILE)
                    selected_bid = next((b for b in bids if b["id"] == selected_offer["bid_id"]), None)
                    if selected_bid:
                        contract_path = generate_contract(selected_bid, selected_offer)
                        if contract_path:
                            subject = f"–î–æ–≥–æ–≤–æ—Ä –ø–æ –∑–∞—è–≤–∫–µ {selected_bid['id']}"
                            body = f"""
                            –£–≤–∞–∂–∞–µ–º—ã–π {selected_offer['sender']},
                            –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –¥–æ–≥–æ–≤–æ—Ä –ø–æ –∑–∞—è–≤–∫–µ {selected_bid['id']}.
                            –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏.
                            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
                            –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª
                            """
                            if send_email(selected_offer['sender_email'], subject, body, attachments=[contract_path]):
                                st.success("–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                                time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                            else:
                                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–≥–æ–≤–æ—Ä–∞")
                                time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞")
                            time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    else:
                        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∑–∞—è–≤–∫–∞")
                        time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                else:
                    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
                    time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        with col3:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤"):
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                    offers = load_json_file(OFFERS_FILE)
                    updated_offers = []
                    sent_notifications = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    success_count = 0
                    now = datetime.now()
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                    new_statuses = {}
                    for idx, row in edited_df.iterrows():
                        key = (row["ID –∑–∞—è–≤–∫–∏"], row["–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫"])
                        new_statuses[key] = row["–°—Ç–∞—Ç—É—Å"]
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    for offer in offers:
                        key = (offer["bid_id"], offer["sender"])
                        if key in new_statuses:
                            old_status = offer.get("status", "–ù–æ–≤–æ–µ")
                            new_status = new_statuses[key]
                            offer["status"] = new_status
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ" –∏–ª–∏ "–ü—Ä–∏–Ω—è—Ç–æ"
                            if new_status in ["–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "–ü—Ä–∏–Ω—è—Ç–æ"] and old_status != new_status:
                                # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: –º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞
                                last_change = offer.get("last_status_change")
                                should_send = True
                                if last_change:
                                    try:
                                        time_diff = (now - datetime.fromisoformat(last_change)).total_seconds()
                                        if time_diff < 60:  # –ù–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É
                                            st.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {offer['sender']}")
                                            should_send = False
                                    except Exception:
                                        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                                        pass
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                                if offer['sender'] in sent_notifications:
                                    should_send = False
                                if should_send:
                                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                    subject = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {offer['bid_id']}"
                                    body = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {offer['sender']}!
–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ —Å ID {offer['bid_id']} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "{new_status}".
–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:
- –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫: {offer['sender']}
- ID –∑–∞—è–≤–∫–∏: {offer['bid_id']}
- –°—Ç–∞—Ç—É—Å: {new_status}
–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
"""
                                    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                                    if send_email(offer['sender_email'], subject, body):
                                        st.success(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {offer['sender']} (—Å—Ç–∞—Ç—É—Å: {new_status})")
                                        success_count += 1
                                        offer["last_status_change"] = now.isoformat()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
                                        sent_notifications.add(offer['sender'])  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                                    else:
                                        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {offer['sender']}")
                        updated_offers.append(offer)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    save_json_file(OFFERS_FILE, updated_offers)
                    st.success(f"‚úÖ –°—Ç–∞—Ç—É—Å—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º")
                    time.sleep(2)
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}")
                    time.sleep(3)
        # --- –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ---
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"):
            try:
                # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ (set) –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                rejected_keys = {
                    (row["ID –∑–∞—è–≤–∫–∏"], row["–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫"]) 
                    for _, row in edited_df.iterrows() 
                    if row["–°—Ç–∞—Ç—É—Å"] == "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
                }
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏—Å–∫–ª—é—á–∞—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ
                filtered_offers = [
                    offer for offer in offers 
                    if (offer["bid_id"], offer["sender"]) not in rejected_keys
                ]
                save_json_file(OFFERS_FILE, filtered_offers)
                st.success("‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")
                time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {str(e)}")
                time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        # --- –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel ---
        def to_excel(df):
            output = BytesIO()
            writer = pd.ExcelWriter(output, engine='xlsxwriter')
            df.to_excel(writer, index=False, sheet_name='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
            writer.close()
            processed_data = output.getvalue()
            return processed_data
        excel_data = to_excel(edited_df)
        st.download_button(
            label="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel",
            data=excel_data,
            file_name=f"offers_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö")
# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏ ---
def manage_carriers():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤"""
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏")
    try:
        carriers = load_json_file(CARRIERS_FILE)
        df = pd.DataFrame(carriers if carriers else [{"name": "", "email": "","notes": ""}])
        with st.expander("üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤"):
            edited_df = st.data_editor(
                df,
                num_rows="dynamic",
                use_container_width=True,
                column_config={
                    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
                    "email": st.column_config.TextColumn(
                        "Email",
                        help="–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π email –∞–¥—Ä–µ—Å",
                        validate="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                    ),
                    "notes": st.column_config.TextColumn(
                        "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
                        help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                    )
                }
            )
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                invalid_rows = []
                for idx, row in edited_df.iterrows():
                    if not row['name'] or not row['email'] or '@' not in row['email']:
                        invalid_rows.append(idx + 1)
                if not invalid_rows:
                    save_json_file(CARRIERS_FILE, edited_df.to_dict('records'))
                    st.success("–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    st.rerun()
                else:
                    st.error(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∞—Ö {', '.join(map(str, invalid_rows))}: –≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º")
                    time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        with st.expander("üì© –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç"):
            col1, col2 = st.columns(2)
            with col1:
                # –ò–º–ø–æ—Ä—Ç –∏–∑ CSV
                uploaded_file = st.file_uploader("–ò–º–ø–æ—Ä—Ç –∏–∑ CSV", type=["csv"])
                if uploaded_file:
                    try:
                        import_df = pd.read_csv(uploaded_file)
                        if set(import_df.columns) >= {"name", "email"}:
                            save_json_file(CARRIERS_FILE, import_df.to_dict('records'))
                            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                            time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                            st.rerun()
                        else:
                            st.error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'name' –∏ 'email'")
                            time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
                        time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                # –ò–º–ø–æ—Ä—Ç –∏–∑ Excel
                uploaded_excel = st.file_uploader("–ò–º–ø–æ—Ä—Ç –∏–∑ Excel", type=["xlsx"])
                if uploaded_excel:
                    try:
                        import_df = pd.read_excel(uploaded_excel)
                        if set(import_df.columns) >= {"name", "email","notes"}:
                            save_json_file(CARRIERS_FILE, import_df.to_dict('records'))
                            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Excel!")
                            time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                            st.rerun()
                        else:
                            st.error("Excel –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'name', 'email', 'notes'")
                            time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Excel: {str(e)}")
                        time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            with col2:
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
                csv = df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                    data=csv,
                    file_name="carriers.csv",
                    mime="text/csv"
                )
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                def to_excel_carriers(df):
                    output = BytesIO()
                    writer = pd.ExcelWriter(output, engine='xlsxwriter')
                    df.to_excel(writer, index=False, sheet_name='–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–∏')
                    writer.close()
                    processed_data = output.getvalue()
                    return processed_data
                excel_data_carriers = to_excel_carriers(df)
                st.download_button(
                    label="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel",
                    data=excel_data_carriers,
                    file_name="carriers.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏: {str(e)}")
        time.sleep(3) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
# --- README ---
def show_readme():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã"""
    st.subheader("üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    with st.expander("1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏"):
        st.markdown("""

        ** –§—É–Ω–∫—Ü–∏–∏ –±–ª–æ–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏":**

           - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤
           - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
           - –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤ 
           - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤ –≤ excel –∏–ª–∏ CSV
           - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö : "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏","Email", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"

       **–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤:**
        1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–º–ø–æ—Ä—Ç –∏–∑ Excel", –≤—ã–±–µ—Ä–µ—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤ "name", "email", "notes", 
           –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ.
        2. –í–ê–ñ–ù–û: –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Excel!", 
           –£–¥–∞–ª–∏—Ç–µ –ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –æ–∫–Ω–µ "–ò–º–ø–æ—Ä—Ç –∏–∑ Excel" –Ω–∞–∂–∞–≤ –Ω–∞ "—Ö" –Ω–∞–ø—Ä–æ—Ç–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ–±–∞–≤—å—Ç–µ/—É–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤(+), –¥–æ–±–∞–≤—å—Ç–µ/–∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ )
        4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è "–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!" –∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º
           –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        5. –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV" –∏–ª–∏ "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"
        """)

    with st.expander("2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"):
        st.markdown("""
        **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É:**
        –í–ù–ò–ú–ê–ù–ò–ï: –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤ –≤ –æ–∫–Ω–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏"
        1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
        2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ø–æ–º–µ—á–µ–Ω—ã *):
           - ID –∑–∞—è–≤–∫–∏ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
           - –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
           - –°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
           - –ü–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
           - –¢–∏–ø –≥—Ä—É–∑–∞
           - –ê–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏
           - –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã
        3. –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É
        4. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
        –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞.
        """)

    with st.expander("3. –†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"):
        st.markdown("""
        **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏:**
        1. –í —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π" –Ω–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ Outlook
        2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        3. –ò–∑–º–µ–Ω—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ù–æ–≤–æ–µ/–í —Ä–∞–±–æ—Ç–µ/–û—Ç–∫–ª–æ–Ω–µ–Ω–æ/–ü—Ä–∏–Ω—è—Ç–æ)
        4. –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä
        5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤"
        6. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
        7. –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"
        """)

# --- –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(
        page_title="–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞",
        layout="wide",
        page_icon="üö¢"
    )
    # --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–°–°–ò–ò –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –ù–ê–ß–ê–õ–ï ---
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ st.session_state.user –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if 'user' not in st.session_state:
        st.session_state.user = "admin" # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –∫–∞–∫ admin

    # --- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
    # –¢–∞–∫ –∫–∞–∫ –º—ã –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user –≤ "admin", –±–ª–æ–∫ —Å —Ñ–æ—Ä–º–æ–π –≤—Ö–æ–¥–∞ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å.
    # –ù–æ –µ—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –≤—Ö–æ–¥, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫.

    # --- –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° ---
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" (—É –Ω–∞—Å —ç—Ç–æ –≤—Å–µ–≥–¥–∞ "admin")
    if st.session_state.user == "admin":
        # –õ–æ–≥–æ—Ç–∏–ø –≤ —Å–∞–π–¥–±–∞—Ä–µ
        st.sidebar.image("Soudal.PNG", use_container_width=False, width=150)
        # –í–∏–¥–∂–µ—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤ —Å–∞–π–¥–±–∞—Ä–µ
        currency_rates_widget()
        st.sidebar.title(f"üë§ {st.session_state.user}")
        menu = st.sidebar.radio(
            "–ú–µ–Ω—é",
            ["README", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏", "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π" ],
            index=0
        )
        if st.sidebar.button("üö™ –í—ã–π—Ç–∏"):
            # –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã—Ö–æ–¥–∞, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å st.session_state.user
            # –ù–∞–ø—Ä–∏–º–µ—Ä: st.session_state.user = None
            # –ù–æ —Å–µ–π—á–∞—Å —É –≤–∞—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–µ–º.
            # st.info("–í—ã—Ö–æ–¥ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            pass # –ò–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–∞–π–¥–±–∞—Ä
        st.sidebar.image("Shi_Py.png", use_container_width=False, width=60)

        # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        if menu == "README":
            show_readme()
        elif menu == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
            create_bid_form()
        elif menu == "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π":
            view_offers()
        elif menu == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏":
            manage_carriers()
    else:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏,
        # –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã, –µ—Å–ª–∏ –≤—ã —Ä–µ—à–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.
        st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
        # st.stop() # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞

if __name__ == "__main__":
    main()